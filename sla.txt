// src/components/EditHearingModal.js
import React, { useState, useEffect, useContext } from 'react';
import { Modal, View, Text, StyleSheet, TouchableOpacity, ScrollView, Alert, ActivityIndicator } from 'react-native';
import * as DocumentPicker from 'expo-document-picker';
import { UploadCloud, FileText, XCircle } from 'lucide-react-native';

import { THEME } from '../constants/theme';
import Input from './Input';
import { AppContext } from '../context/AppContext';
import Button from '../components/button';

// Suas informações do Cloudinary
const CLOUDINARY_CLOUD_NAME = "dwj4shg3p";
const CLOUDINARY_UPLOAD_PRESET = "u9jyzisv";

const EditHearingModal = ({ isOpen, onClose, onSave, hearing }) => {
  const { isAdmin } = useContext(AppContext);
  const [formState, setFormState] = useState(hearing);
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [uploadProgress, setUploadProgress] = useState('');

  useEffect(() => {
    if (hearing) {
      setFormState({ 
        ...hearing, 
        proceedings: hearing.proceedings || [],
        clientEmail: hearing.clientEmail || '' 
      });
      setErrors({});
    }
  }, [hearing]);

  if (!isOpen || !formState) return null;

  const handleChange = (name, value) => {
    let processedValue = value;
    if (name === 'processNumber') {
      processedValue = value.replace(/[^0-9./-]/g, '');
    }
    setFormState(prev => ({ ...prev, [name]: processedValue }));
    if (value) {
      setErrors(prev => ({ ...prev, [name]: null }));
    }
  };

  const pickDocument = async () => {
    if ((formState.proceedings || []).length >= 50) {
      Alert.alert("Limite atingido", "Você já adicionou o máximo de 50 andamentos.");
      return;
    }
    try {
      const result = await DocumentPicker.getDocumentAsync({
        type: 'application/pdf', copyToCacheDirectory: true,
      });
      if (!result.canceled) {
        const newFile = result.assets[0];
        setFormState(prev => ({ 
          ...prev, 
          proceedings: [...(prev.proceedings || []), newFile]
        }));
      }
    } catch (err) { Alert.alert("Erro", "Não foi possível selecionar os arquivos."); console.error(err); }
  };

  const removeProceeding = (fileIdentifier) => {
    setFormState(prev => ({ 
      ...prev, 
      proceedings: prev.proceedings.filter(file => (file.uri || file.url) !== fileIdentifier) 
    }));
  };

  const validate = () => {
    const newErrors = {};
    Object.keys(formState).forEach(key => {
      if (key === 'id' || key === 'description' || key === 'proceedings' || (isAdmin && !formState.clientEmail)) return; // Tornando email opcional na edição
      if (!formState[key]) {
        newErrors[key] = "Preencha o campo";
      }
    });
     if (isAdmin && formState.clientEmail && !formState.clientEmail.includes('@')) {
      newErrors.clientEmail = "Digite um e-mail válido.";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = async () => {
    if (!validate()) return;
    setIsSubmitting(true);
    setUploadProgress('Verificando arquivos...');

    try {
      const finalProceedings = [];
      const cloudinaryUrl = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/raw/upload`;
      const filesToUpload = (formState.proceedings || []).filter(file => file.uri && !file.url);
      const existingFiles = (formState.proceedings || []).filter(file => file.url);
      finalProceedings.push(...existingFiles);

      for (let i = 0; i < filesToUpload.length; i++) {
        const file = filesToUpload[i];
        setUploadProgress(`Enviando arquivo ${i + 1} de ${filesToUpload.length}...`);
        
        const formData = new FormData();
        // --- ALTERAÇÃO AQUI TAMBÉM ---
        formData.append('file', { uri: file.uri, type: 'application/pdf', name: file.name });
        formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);
        formData.append('public_id', file.name); // Usa o nome do arquivo como ID

        const response = await fetch(cloudinaryUrl, { method: 'POST', body: formData });
        const data = await response.json();

        if (data.secure_url) {
          finalProceedings.push({ name: file.name, url: data.secure_url });
        } else {
          const errorMessage = data.error?.message || 'Falha no upload para o Cloudinary';
          throw new Error(errorMessage);
        }
      }

      const dataToUpdate = { ...formState, proceedings: finalProceedings };
      await onSave(dataToUpdate);

    } catch (error) {
      console.error("Erro ao salvar edição: ", error);
      Alert.alert('Erro', `Ocorreu um erro ao salvar as alterações: ${error.message}`);
    } finally {
      setIsSubmitting(false);
      setUploadProgress('');
    }
  };

  return (
    <Modal transparent={true} visible={isOpen} animationType="slide" onRequestClose={onClose}>
      <View style={styles.overlay}>
        <View style={styles.container}>
          <Text style={styles.title}>Editar Andamento</Text>
          <ScrollView>
            <Input label="Número do Processo" value={formState.processNumber} onChangeText={(v) => handleChange('processNumber', v)} error={errors.processNumber} />
            
            {isAdmin && (
              <Input 
                label="E-mail do Cliente Associado" 
                value={formState.clientEmail} 
                onChangeText={(v) => handleChange('clientEmail', v.toLowerCase())}
                error={errors.clientEmail}
                keyboardType="email-address"
                autoCapitalize="none"
              />
            )}

            <View style={styles.row}>
              <View style={styles.halfWidth}><Input label="Data" value={formState.date} onChangeText={(v) => handleChange('date', v)} error={errors.date} /></View>
              <View style={styles.halfWidth}><Input label="Hora" value={formState.time} onChangeText={(v) => handleChange('time', v)} error={errors.time} /></View>
            </View>
            <Input label="Local" value={formState.location} onChangeText={(v) => handleChange('location', v)} error={errors.location} />
            <Input label="Partes" value={formState.parties} onChangeText={(v) => handleChange('parties', v)} error={errors.parties} />
            <Input label="Natureza" value={formState.nature} onChangeText={(v) => handleChange('nature', v)} error={errors.nature} />
            <Input 
              label="Descrição (Opcional)" 
              value={formState.description} 
              onChangeText={(v) => handleChange('description', v)}
              multiline={true}
              numberOfLines={4}
            />

            <Text style={styles.label}>Andamentos (Opcional)</Text>
            {formState.proceedings && formState.proceedings.map((file) => (
              <View key={file.uri || file.url} style={styles.fileSelectedContainer}>
                <FileText color={THEME.primary} size={24} />
                <Text style={styles.fileName} numberOfLines={1}>{file.name}</Text>
                <TouchableOpacity onPress={() => removeProceeding(file.uri || file.url)}>
                  <XCircle color={THEME.danger} size={24} />
                </TouchableOpacity>
              </View>
            ))}
            {(formState.proceedings || []).length < 50 && (
              <TouchableOpacity style={styles.documentPicker} onPress={pickDocument}>
                <UploadCloud color={THEME.primary} size={24} />
                <Text style={styles.documentPickerText}>Adicionar Andamento (PDF)</Text>
              </TouchableOpacity>
            )}

          </ScrollView>
          <View style={styles.buttonContainer}>
            <TouchableOpacity onPress={onClose} style={[styles.button, { backgroundColor: THEME.textSecondary }]} disabled={isSubmitting}>
              <Text style={styles.buttonText}>Cancelar</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={handleSave} style={[styles.button, { backgroundColor: THEME.primary }]} disabled={isSubmitting}>
              {isSubmitting 
                ? <View style={{alignItems: 'center'}}>
                    <ActivityIndicator color={THEME.background} />
                    {uploadProgress && <Text style={styles.progressText}>{uploadProgress}</Text>}
                  </View>
                : <Text style={styles.buttonText}>Salvar</Text>
              }
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: { flex: 1, backgroundColor: 'rgba(0,0,0,0.7)', justifyContent: 'center', alignItems: 'center', padding: 16 },
  container: { backgroundColor: THEME.card, padding: 24, borderRadius: 8, width: '100%', maxHeight: '85%' },
  title: { fontSize: 22, fontWeight: 'bold', color: THEME.primary, marginBottom: 24 },
  row: { flexDirection: 'row', justifyContent: 'space-between' },
  halfWidth: { width: '48%' },
  buttonContainer: { flexDirection: 'row', justifyContent: 'flex-end', marginTop: 24 },
  button: { paddingVertical: 10, paddingHorizontal: 24, borderRadius: 8, marginLeft: 16, justifyContent: 'center', alignItems: 'center', minWidth: 100, minHeight: 40 },
  buttonText: { color: THEME.background, fontWeight: 'bold' },
  label: { color: THEME.primary, fontSize: 14, fontWeight: '500', marginBottom: 8, marginTop: 16 },
  documentPicker: { flexDirection: 'row', alignItems: 'center', backgroundColor: THEME.card, borderWidth: 2, borderColor: THEME.textSecondary, borderStyle: 'dashed', borderRadius: 8, padding: 16, justifyContent: 'center', marginTop: 8 },
  documentPickerText: { color: THEME.textSecondary, marginLeft: 12, fontSize: 16 },
  fileSelectedContainer: { flexDirection: 'row', alignItems: 'center', backgroundColor: THEME.card, borderRadius: 8, padding: 16, justifyContent: 'space-between', marginBottom: 8 },
  fileName: { color: THEME.text, flex: 1, marginLeft: 12, marginRight: 12, fontSize: 16 },
  progressText: { color: THEME.background, fontSize: 12, marginTop: 4 },
});

export default EditHearingModal;


};